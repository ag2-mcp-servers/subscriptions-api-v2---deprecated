# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:06:05+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field, RootModel


class AdditionalComponent(BaseModel):
    longName: str
    shortName: str
    types: List[str] = Field(..., description='')


class Frequency(BaseModel):
    interval: int
    periodicity: str


class InsertAddressesbygroupIdRequest(BaseModel):
    additionalComponents: List[AdditionalComponent] = Field(..., description='')
    addressId: str
    addressName: str
    addressType: str
    city: str
    complement: str
    country: str
    formattedAddress: str
    geoCoordinate: List[int] = Field(..., description='')
    neighborhood: str
    number: str
    postalCode: str
    receiverName: str
    reference: str
    state: str
    street: str


class InsertAddressesforSubscriptionRequest(BaseModel):
    additionalComponents: str
    addressId: str
    addressName: str
    addressType: str
    city: str
    complement: str
    country: str
    formattedAddress: str
    geoCoordinate: str
    neighborhood: str
    number: str
    postalCode: str
    receiverName: str
    reference: str
    state: str
    street: str


class PaymentMethod(BaseModel):
    paymentAccountId: str
    paymentSystem: str


class Properties(BaseModel):
    additionalProp1: str
    additionalProp2: str
    additionalProp3: str


class PurchaseSettings(BaseModel):
    currencyCode: str
    paymentMethod: PaymentMethod
    purchaseDay: str
    salesChannel: str
    selectedSla: str
    seller: str


class ShippingAddress(BaseModel):
    additionalComponents: List[AdditionalComponent] = Field(..., description='')
    addressId: str
    addressName: str
    addressType: str
    city: str
    complement: str
    country: str
    formattedAddress: str
    geoCoordinate: List[int] = Field(..., description='')
    neighborhood: str
    number: str
    postalCode: str
    receiverName: str
    reference: str
    state: str
    street: str


class Sku(BaseModel):
    detailUrl: str
    id: str
    imageUrl: str
    name: str
    nameComplete: str
    productName: str


class Validity(BaseModel):
    begin: str
    end: str


class Settings(BaseModel):
    defaultSla: str = Field(
        ..., description='Default delivery method.', examples=[None], title='defaultSla'
    )
    deliveryChannels: List[str] = Field(
        ...,
        description='Array containing delivery channels.',
        examples=['delivery'],
        title='deliveryChannels',
    )
    executionHourInUtc: int = Field(
        ...,
        description='Indicates the time future subscription orders will be generated.',
        examples=[9],
        title='executionHourInUtc',
    )
    isMultipleInstallmentsEnabledOnCreation: bool = Field(
        ...,
        description='Defines whether or not multiple installments are enabled when a subscription is created.',
        examples=[False],
        title='isMultipleInstallmentsEnabledOnCreation',
    )
    isMultipleInstallmentsEnabledOnUpdate: bool = Field(
        ...,
        description='Defines whether or not multiple installments are enabled when a subscription is updated.',
        examples=[False],
        title='isMultipleInstallmentsEnabledOnUpdate',
    )
    isUsingV3: bool = Field(
        ...,
        description='Indicates whether or not Subscriptions V3 is enabled.',
        examples=[True],
        title='isUsingV3',
    )
    manualPriceAllowed: bool = Field(
        ...,
        description='When set to `true`, this property enables manual price configuration in subscription items. This is valid for all existing subscriptions, provided that there is a manual price configured and that `isUsingV3` is `true`.',
        examples=[False],
        title='manualPriceAllowed',
    )
    onMigrationProcess: bool = Field(
        ...,
        description='Indicates whether or not the account is in the migration process to Subscriptions V3.',
        examples=[False],
        title='onMigrationProcess',
    )
    orderCustomDataAppId: str = Field(
        ...,
        description='When filled, this field passes along the `customData` infomration in the order to the future recurrent subscription orders.',
        examples=[None],
        title='orderCustomDataAppId',
    )
    postponeExpiration: bool = Field(
        ...,
        description='Defines whether or not the expiration of subscriptions can be postponed.',
        examples=[False],
        title='postponeExpiration',
    )
    randomIdGeneration: bool = Field(
        ...,
        description='Defines whether or not the subscription order IDs will be randomly generated.',
        examples=[False],
        title='randomIdGeneration',
    )
    slaOption: str = Field(
        ..., description='Delivery method.', examples=['NONE'], title='slaOption'
    )
    useItemPriceFromOriginalOrder: bool = Field(
        ...,
        description='When set to `true`, this property enables using the manual price for each item from the original subscription order. This is only valid for new subscriptions, created from the moment this configuration is enabled. For this to work, it is mandatory that the `manualPriceAllowed` property is set to `true` and that `isUsingV3` is `true`.',
        examples=[False],
        title='useItemPriceFromOriginalOrder',
    )
    workflowVersion: str = Field(
        ..., description='Workflow version.', examples=['1.1'], title='workflowVersion'
    )


class SubscriptionsSubscriptionIdAddressesPostRequest(
    RootModel[List[InsertAddressesforSubscriptionRequest]]
):
    root: List[InsertAddressesforSubscriptionRequest] = Field(..., description='')


class AdditemsubscriptionGroupIdRequest(BaseModel):
    endpoint: str
    priceAtSubscriptionDate: int
    quantity: int
    sellingPrice: int
    sku: Sku


class Item(BaseModel):
    endpoint: str
    priceAtSubscriptionDate: int
    quantity: int
    sellingPrice: int
    sku: Sku


class Metadatum(BaseModel):
    name: str
    properties: Properties


class Plan(BaseModel):
    frequency: Frequency
    type: str
    validity: Validity


class UpdateSubscriptionsbySubscriptionIdRequest(BaseModel):
    isSkipped: bool
    item: Item
    metadata: List[Metadatum] = Field(..., description='')
    plan: Plan
    purchaseSettings: PurchaseSettings
    shippingAddress: ShippingAddress
    status: str


class Item1(BaseModel):
    SubscriptionId: str
    createdAt: str
    cycleCount: int
    endpoint: str
    isSkipped: bool
    lastUpdate: str
    metadata: List[Metadatum] = Field(..., description='')
    originalItemIndex: int
    originalOrderId: str
    priceAtSubscriptionDate: int
    quantity: int
    sellingPrice: int
    sku: Sku
    status: str


class UpdateSubscriptionbygroupIdRequest(BaseModel):
    isSkipped: bool
    item: List[Item1] = Field(..., description='')
    metadata: List[Metadatum] = Field(..., description='')
    plan: Plan
    purchaseSettings: PurchaseSettings
    shippingAddress: ShippingAddress
    status: str

# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:06:05+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    AdditemsubscriptionGroupIdRequest,
    InsertAddressesbygroupIdRequest,
    Settings,
    SubscriptionsSubscriptionIdAddressesPostRequest,
    UpdateSubscriptionbygroupIdRequest,
    UpdateSubscriptionsbySubscriptionIdRequest,
)

app = MCPProxy(
    contact={},
    description='VTEX Subscriptions REST API Documentation\n\nThis documentation describes the available REST APIs for VTEX Subscription System.\n\nWith Subscriptions you can set up regularly scheduled deliveries.\n\nAll requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)',
    title='Subscriptions API (v2 - DEPRECATED)',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br/api/rns',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/report/reportStatus/{reportId}',
    description=""" Retrieves the Subscription's report status, filtering by its reportId. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getreportstatusby_i_d(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    report_id: str = Path(..., alias='reportId'),
):
    """
    Get report status by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/subscriptionsByDate',
    description=""" Retrieves a report with the subscriptions created at the date interval requested """,
    tags=['report_management', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def requestreportbydate(
    requester_email: str = Query(..., alias='requesterEmail'),
    begin_date: int = Query(..., alias='beginDate'),
    end_date: int = Query(..., alias='endDate'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve Subscription report by date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/subscriptionsByStatus',
    description=""" Retrieves Subscriptions' reports, filtering by status. The report will be sent by email, to the address inserted in the API's path. """,
    tags=['report_management', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def requestreportby_status(
    requester_email: str = Query(..., alias='requesterEmail'),
    status: int = ...,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve Subscription report by Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/subscriptionsOrderByDate',
    description=""" Retrieves a report regarding the Subscriptions created during the date interval of orders. """,
    tags=['report_management', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def requestreportbyorderdate(
    requester_email: str = Query(..., alias='requesterEmail'),
    begin_date: int = Query(..., alias='beginDate'),
    end_date: int = Query(..., alias='endDate'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve Subscription report by order date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/subscriptionsScheduled',
    description=""" Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested """,
    tags=['report_management', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def requestreportbyschedule(
    requester_email: str = Query(..., alias='requesterEmail'),
    begin_date: int = Query(..., alias='beginDate'),
    end_date: int = Query(..., alias='endDate'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve Subscription report by schedule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/subscriptionsUpdated',
    description=""" Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API's path. """,
    tags=['report_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def requestreportbyupdate(
    requester_email: str = Query(..., alias='requesterEmail'),
    begin_date: int = Query(..., alias='beginDate'),
    end_date: int = Query(..., alias='endDate'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Request report by update
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings',
    description=""" Lists the current Subscriptions settings in your store. """,
    tags=['subscription_settings_management', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_settings(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Subscriptions Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/settings',
    description=""" Edits Subscriptions settings in your store. """,
    tags=['subscription_settings_management', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def edit_settings(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: Settings = ...,
):
    """
    Edit Subscriptions settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions',
    description=""" Retrieves details of a given customer's subscriptions, searching by that customer's `customerId`. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getsubscriptionstocustomer(
    customer_id: str = Query(..., alias='customerId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve customer's subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group',
    description=""" Retrieves all subscription groups in your store. """,
    tags=['subscription_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_allsubscriptiongroup(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    List All subscription groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/list',
    description=""" Retrieves a list of Subscription groups in your store. """,
    tags=['subscription_group_operations', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getsubscriptiongrouplist(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get subscription group list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/nextPurchase/{dateStr}',
    description=""" Lists details of a given subscription group's next purchase, filtering by dateStr. """,
    tags=['next_purchase_information', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_nextpurchase(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    date_str: str = Path(..., alias='dateStr'),
):
    """
    Get Next purchase
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/simulate/{groupId}',
    description=""" Retrieves Subscription simulations, filtering by groupId. """,
    tags=['subscription_group_operations', 'subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_simulatebysubscription_group(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Get Simulation by subscription-group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/{groupId}',
    description=""" Lists Subscription details, filtering by `groupId`. """,
    tags=['subscription_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_subscriptionbygroup_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Get Subscription by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/subscriptions-group/{groupId}',
    description=""" Updates a Subscription by `groupId`. """,
    tags=['subscription_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_subscriptionbygroup_id(
    group_id: str = Path(..., alias='groupId'),
    body: UpdateSubscriptionbygroupIdRequest = ...,
):
    """
    Update Subscription by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subscriptions-group/{groupId}/additem',
    description=""" Adds an SKU to a given Subscription, filtering by groupId. """,
    tags=['subscription_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def additemsubscription_group_id(
    group_id: str = Path(..., alias='groupId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: AdditemsubscriptionGroupIdRequest = ...,
):
    """
    Add Subscription item by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/{groupId}/addresses',
    description=""" Lists addresses linked to a given Subscription group, filtering by groupId. """,
    tags=['address_information_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getaddressesbygroup_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Get addresses by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subscriptions-group/{groupId}/addresses',
    description=""" Insert address information of a given Subscription group, filtering by groupId. """,
    tags=['address_information_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def insert_addressesbygroup_id(
    group_id: str = Path(..., alias='groupId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: InsertAddressesbygroupIdRequest = ...,
):
    """
    Insert Addresses by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/subscriptions-group/{groupId}/cancel',
    description=""" Cancels Subscription by `groupId` """,
    tags=['subscription_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def cancel_subscriptionbygroup_id(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Cancel Subscription by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/{groupId}/config',
    description=""" Retrieves details about a given subscription group's configuration, filtering by groupId. """,
    tags=[
        'subscription_management',
        'subscription_settings_management',
        'subscription_group_operations',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_configsubscriptionsgroup(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    List Subscription group's Configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/{groupId}/conversation-message',
    description=""" Retrieves the conversation of a given Subscription group, filtering by groupId. """,
    tags=['conversation_history_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_conversation_messagebygroup_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Get Conversation Message by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/{groupId}/frequency-options',
    description=""" Lists frequency options of a given Subscription group, filtering by groupId. """,
    tags=['subscription_management', 'frequency_option_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getfrequencyoptionsbygroup_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Get frequency options by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/{groupId}/payment-systems',
    description=""" Retrieves payment system's information of a given Subscription group, filtering by groupId. """,
    tags=['payment_processing_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getpayment_systembygroup_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    Get payment System by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions-group/{groupId}/will-create',
    description=""" Retrieves Subscription groups listed as 'will create', filtering by groupId. """,
    tags=['subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getwillcreatebygroup_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    group_id: str = Path(..., alias='groupId'),
):
    """
    List 'Will create' by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subscriptions-group/{groupid}/instances/{instanceId}/retry',
    description=""" Permits the retry of a Subscription group, via API, filtering by groupId and instanceId. """,
    tags=['subscription_management', 'subscription_group_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def retrysubscriptionbygroup_id(
    groupid: str,
    instance_id: str = Path(..., alias='instanceId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Retry subscription by groupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/list',
    description=""" Retrieves a list of Subscriptions linked to your store. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_subscription_list(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Subscription List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}',
    description=""" Lists Subscription's details, searching by `subscriptionId`. """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getsubscriptionby_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    subscription_id: str = Path(..., alias='subscriptionId'),
):
    """
    Retrieve subscription by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/subscriptions/{subscriptionId}',
    description=""" Update, add or alter information of a given Subscription, filtering by `subscriptionId`. """,
    tags=['subscription_management', 'subscription_settings_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_subscriptionsby_subscription_id(
    subscription_id: str = Path(..., alias='subscriptionId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: UpdateSubscriptionsbySubscriptionIdRequest = ...,
):
    """
    Update Subscriptions by SubscriptionId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subscriptions/{subscriptionId}/addresses',
    description=""" Inserts address's information to complement the Subscription details. """,
    tags=['subscription_management', 'address_information_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def insert_addressesfor_subscription(
    subscription_id: str = Path(..., alias='subscriptionId'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SubscriptionsSubscriptionIdAddressesPostRequest = ...,
):
    """
    Insert Addresses for Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/subscriptions/{subscriptionId}/cancel',
    description=""" Cancels all Subscriptions of a subscription group. This operation does not have a rollback. Once cancelled, it cannot be re-activated """,
    tags=['subscription_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def cancel_subscriptionsby_subscription_id(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    subscription_id: str = Path(..., alias='subscriptionId'),
):
    """
    Cancel Subscriptions by SubscriptionId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriptions/{subscriptionId}/frequency-options',
    description=""" Lists frequency options for the Subscription, filtering by `subscriptionId`. """,
    tags=['subscription_management', 'frequency_option_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getfrequencyoptionsbysubscription_id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    subscription_id: str = Path(..., alias='subscriptionId'),
):
    """
    Get frequency options by subscriptionId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
